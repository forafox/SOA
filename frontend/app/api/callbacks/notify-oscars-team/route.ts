import { NextRequest, NextResponse } from 'next/server'

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–ª–ª–±—ç–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏
let recentCallbacks: any[] = []

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    console.log('üé¨ API Route: Callback notifyOscarsTeam received:', body)
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫
    const callback = {
      id: Math.random().toString(36).substr(2, 9),
      type: 'notifyOscarsTeam',
      data: body,
      status: 'success',
      timestamp: new Date().toISOString()
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    recentCallbacks.unshift(callback)
    recentCallbacks = recentCallbacks.slice(0, 10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    
    console.log('üé¨ API Route: Callback saved to recent storage:', callback.id)
    console.log('üé¨ API Route: Total callbacks in storage:', recentCallbacks.length)
    
    return NextResponse.json({ 
      success: true, 
      message: 'Callback notifyOscarsTeam processed successfully',
      callback
    })
  } catch (error) {
    console.error('Error processing notifyOscarsTeam callback:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to process callback' },
      { status: 500 }
    )
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–±—ç–∫–æ–≤
export function getRecentCallbacks() {
  return recentCallbacks
}
