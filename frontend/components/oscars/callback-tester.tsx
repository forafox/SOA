"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { TestTube, Send } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export function CallbackTester() {
  const [loading, setLoading] = useState(false)
  const { toast } = useToast()

  const testCallback = async (type: 'onAwarded' | 'notifyAdmins' | 'notifyOscarsTeam') => {
    setLoading(true)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('operation-start', {
        detail: { operationId: type }
      }))
    }
    
    try {
      const testData = {
        onAwarded: {
          updatedMovies: [
            { id: 1, name: "Test Movie 1", oscarsCount: 3 },
            { id: 2, name: "Test Movie 2", oscarsCount: 2 }
          ]
        },
        notifyAdmins: {
          updatedMovies: [
            { id: 3, name: "Low Oscar Movie", oscarsCount: 1 }
          ]
        },
        notifyOscarsTeam: {
          movieId: 1,
          addedOscars: 2,
          category: "Best Picture",
          date: new Date().toISOString()
        }
      }

      const response = await fetch('/api/callbacks/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type,
          data: testData[type]
        })
      })

      if (response.ok) {
        const result = await response.json()
        
        toast({
          title: "–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω",
          description: `–ö–æ–ª–ª–±—ç–∫ ${type} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`,
          duration: 3000,
        })
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ UI
        if (result.callback) {
          console.log('üß™ Test: Sending callback event to UI:', result.callback)
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ window events
          if (typeof window !== 'undefined') {
            window.dispatchEvent(new CustomEvent('callback-received', {
              detail: result.callback
            }))
          }
        }
      } else {
        throw new Error('Failed to send test callback')
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–ª–ª–±—ç–∫",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const callbackTypes = [
    { type: 'onAwarded' as const, label: '–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ', description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ –¥–ª–∏–Ω–µ' },
    { type: 'notifyAdmins' as const, label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' },
    { type: 'notifyOscarsTeam' as const, label: '–ö–æ–º–∞–Ω–¥–∞ –û—Å–∫–∞—Ä–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –û—Å–∫–∞—Ä–æ–≤' }
  ]

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <TestTube className="h-5 w-5" />
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–±—ç–∫–æ–≤
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <p className="text-sm text-muted-foreground">
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–ª–±—ç–∫–æ–≤. 
            –ö–æ–ª–ª–±—ç–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å–µ –∫–æ–ª–ª–±—ç–∫–æ–≤ –Ω–∏–∂–µ.
          </p>
          
          <div className="grid gap-3">
            {callbackTypes.map(({ type, label, description }) => (
              <div key={type} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <Badge variant="outline">{type}</Badge>
                    <span className="font-medium">{label}</span>
                  </div>
                  <p className="text-sm text-muted-foreground">{description}</p>
                </div>
                <Button
                  onClick={() => testCallback(type)}
                  disabled={loading}
                  size="sm"
                  variant="outline"
                >
                  {loading ? (
                    "–û—Ç–ø—Ä–∞–≤–∫–∞..."
                  ) : (
                    <>
                      <Send className="h-4 w-4 mr-2" />
                      –¢–µ—Å—Ç
                    </>
                  )}
                </Button>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
